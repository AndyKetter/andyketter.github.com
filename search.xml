<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title></title>
      <url>%2F2017%2F03%2F03%2FReact-router-redux%2F</url>
      <content type="text"><![CDATA[react-router-redux Keep your router in sync with application state :sparkles: Formerly known as redux-simple-router You’re a smart person. You use Redux to manage your application state. You use React Router to do routing. All is good. But the two libraries don’t coordinate. You want to do time travel with your application state, but React Router doesn’t navigate between pages when you replay actions. It controls an important part of application state: the URL. This library helps you keep that bit of state in sync with your Redux store. We keep a copy of the current location hidden in state. When you rewind your application state with a tool like Redux DevTools, that state change is propagated to React Router so it can adjust the component tree accordingly. You can jump around in state, rewinding, replaying, and resetting as much as you’d like, and this library will ensure the two stay in sync at all times. This library is not necessary for using Redux together with React Router. You can use the two together just fine without any additional libraries. It is useful if you care about recording, persisting, and replaying user actions, using time travel. If you don’t care about these features, just use Redux and React Router directly. Installation1npm install --save react-router-redux How It WorksThis library allows you to use React Router’s APIs as they are documented. And, you can use redux like you normally would, with a single app state. The library simply enhances a history instance to allow it to synchronize any changes it receives into application state. history + store (redux) &rarr; react-router-redux &rarr; enhanced history &rarr; react-router TutorialLet’s take a look at a simple example. 1234567891011121314151617181920212223242526272829303132import React from 'react'import ReactDOM from 'react-dom'import &#123; createStore, combineReducers &#125; from 'redux'import &#123; Provider &#125; from 'react-redux'import &#123; Router, Route, browserHistory &#125; from 'react-router'import &#123; syncHistoryWithStore, routerReducer &#125; from 'react-router-redux'import reducers from '&lt;project-path&gt;/reducers'// Add the reducer to your store on the `routing` keyconst store = createStore( combineReducers(&#123; ...reducers, routing: routerReducer &#125;))// Create an enhanced history that syncs navigation events with the storeconst history = syncHistoryWithStore(browserHistory, store)ReactDOM.render( &lt;Provider store=&#123;store&#125;&gt; &#123; /* Tell the Router to use our enhanced history */ &#125; &lt;Router history=&#123;history&#125;&gt; &lt;Route path="/" component=&#123;App&#125;&gt; &lt;Route path="foo" component=&#123;Foo&#125;/&gt; &lt;Route path="bar" component=&#123;Bar&#125;/&gt; &lt;/Route&gt; &lt;/Router&gt; &lt;/Provider&gt;, document.getElementById('mount')) Now any time you navigate, which can come from pressing browser buttons or navigating in your application code, the enhanced history will first pass the new location through the Redux store and then on to React Router to update the component tree. If you time travel, it will also pass the new state to React Router to update the component tree again. How do I watch for navigation events, such as for analytics?Simply listen to the enhanced history via history.listen. This takes in a function that will receive a location any time the store updates. This includes any time travel activity performed on the store. 123const history = syncHistoryWithStore(browserHistory, store)history.listen(location =&gt; analyticsService.track(location.pathname)) For other kinds of events in your system, you can use middleware on your Redux store like normal to watch any action that is dispatched to the store. What if I use Immutable.js or another state wrapper with my Redux store?When using a wrapper for your store’s state, such as Immutable.js, you will need to change two things from the standard setup: By default, the library expects to find the history state at state.routing. If your wrapper prevents accessing properties directly, or you want to put the routing state elsewhere, pass a selector function to access the historystate via the selectLocationState option on syncHistoryWithStore. Provide your own reducer function that will receive actions of type LOCATION_CHANGE and return the payload merged into the locationBeforeTransitions property of the routing state. For example, state.set(&quot;routing&quot;, {locationBeforeTransitions: action.payload}). These two hooks will allow you to store the state that this library uses in whatever format or wrapper you would like. How do I access router state in a container component?React Router provides route information via a route component’s props. This makes it easy to access them from a container component. When using react-redux to connect() your components to state, you can access the router’s props from the 2nd argument of mapStateToProps: 123456function mapStateToProps(state, ownProps) &#123; return &#123; id: ownProps.params.id, filter: ownProps.location.query.filter &#125;;&#125; You should not read the location state directly from the Redux store. This is because React Router operates asynchronously (to handle things such as dynamically-loaded components) and your component tree may not yet be updated in sync with your Redux state. You should rely on the props passed by React Router, as they are only updated after it has processed all asynchronous code. What if I want to issue navigation events via Redux actions?React Router provides singleton versions of history (browserHistory and hashHistory) that you can import and use from anywhere in your application. However, if you prefer Redux style actions, the library also provides a set of action creators and a middleware to capture them and redirect them to your history instance. 123456789101112import &#123; createStore, combineReducers, applyMiddleware &#125; from 'redux';import &#123; routerMiddleware, push &#125; from 'react-router-redux'// Apply the middleware to the storeconst middleware = routerMiddleware(browserHistory)const store = createStore( reducers, applyMiddleware(middleware))// Dispatch from anywhere like normal.store.dispatch(push('/foo')) Examples examples/basic - basic reference implementation Examples from the community: shakacode/react-webpack-rails-tutorial - react-router-redux including Server Rendering using React on Rails, live at www.reactrails.com. davezuko/react-redux-starter-kit - popular redux starter kit tip: migrating from react-router-redux ^3.0.0? use this commit as a reference svrcekmichal/universal-react - Universal react app with async actions provided by svrcekmichal/reasync package steveniseki/react-router-redux-example - minimal react-router-redux example includes css modules and universal rendering choonkending/react-webpack-node - Full-stack universal Redux App kuy/treemap-with-router - An example for react-router-redux with d3’s treemap. &rarr; Have an example to add? Send us a PR! &larr; APIrouterReducer()You must add this reducer to your store for syncing to work. A reducer function that stores location updates from history. If you use combineReducers, it should be nested under the routing key. history = syncHistoryWithStore(history, store, [options])Creates an enhanced history from the provided history. This history changes history.listen to pass all location updates through the provided store first. This ensures if the store is updated either from a navigation event or from a time travel action, such as a replay, the listeners of the enhanced history will stay in sync. You must provide the enhanced history to your &lt;Router&gt; component. This ensures your routes stay in sync with your location and your store at the same time. The options object takes in the following optional keys: selectLocationState - (default state =&gt; state.routing) A selector function to obtain the history state from your store. Useful when not using the provided routerReducer to store history state. Allows you to use wrappers, such as Immutable.js. adjustUrlOnReplay - (default true) When false, the URL will not be kept in sync during time travel. This is useful when using persistState from Redux DevTools and not wanting to maintain the URL state when restoring state. push(location), replace(location), go(number), goBack(), goForward()You must install routerMiddleware for these action creators to work. Action creators that correspond with the [history methods of the same name](https://github.com/mjackson/history/blob/master/README.md#navigation). For reference they are defined as follows: push - Pushes a new location to history, becoming the current location. replace - Replaces the current location in history. go - Moves backwards or forwards a relative number of locations in history. goForward - Moves forward one location. Equivalent to go(1) goBack - Moves backwards one location. Equivalent to go(-1) Both push and replace take in a location descriptor, which can be an object describing the URL or a plain string URL. These action creators are also available in one single object as routerActions, which can be used as a convenience when using Redux’s bindActionCreators(). routerMiddleware(history)A middleware you can apply to your Redux store to capture dispatched actions created by the action creators. It will redirect those actions to the provided history instance. LOCATION_CHANGEAn action type that you can listen for in your reducers to be notified of route updates. Fires after any changes to history.]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F03%2F03%2FReact-router%2F</url>
      <content type="text"><![CDATA[React Router React Router is a complete routing library for React. React Router keeps your UI in sync with the URL. It has a simple API with powerful features like lazy code loading, dynamic route matching, and location transition handling built right in. Make the URL your first thought, not an after-thought. v4 Is ComingThe next version of React Router (v4) is in beta now. v4 Documentation Docs &amp; Help Tutorial – do this first! Guides and API docs (v2, v3) Troubleshooting guide Changelog Stack Overflow CodePen boilerplate for bug reports Older Versions: 0.13.x - docs / guides / code / upgrade guide 1.0.x - docs / code / upgrade guide For questions and support, please visit our channel on Reactiflux or Stack Overflow. Browser SupportWe support all browsers and environments where React runs. InstallationUsing npm: $ npm install --save react-router Then with a module bundler like webpack that supports either CommonJS or ES2015 modules, use as you would anything else: 1234567// using an ES6 transpiler, like babelimport &#123; Router, Route, Link &#125; from 'react-router'// not using an ES6 transpilervar Router = require('react-router').Routervar Route = require('react-router').Routevar Link = require('react-router').Link The UMD build is also available on unpkg: 1&lt;script src="https://unpkg.com/react-router/umd/ReactRouter.min.js"&gt;&lt;/script&gt; You can find the library on window.ReactRouter. What’s it look like?12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import React from 'react'import &#123; render &#125; from 'react-dom'import &#123; Router, Route, Link, browserHistory &#125; from 'react-router'const App = React.createClass(&#123;/*...*/&#125;)const About = React.createClass(&#123;/*...*/&#125;)const NoMatch = React.createClass(&#123;/*...*/&#125;)const Users = React.createClass(&#123; render() &#123; return ( &lt;div&gt; &lt;h1&gt;Users&lt;/h1&gt; &lt;div className="master"&gt; &lt;ul&gt; &#123;/* use Link to route around the app */&#125; &#123;this.state.users.map(user =&gt; ( &lt;li key=&#123;user.id&#125;&gt;&lt;Link to=&#123;`/user/$&#123;user.id&#125;`&#125;&gt;&#123;user.name&#125;&lt;/Link&gt;&lt;/li&gt; ))&#125; &lt;/ul&gt; &lt;/div&gt; &lt;div className="detail"&gt; &#123;this.props.children&#125; &lt;/div&gt; &lt;/div&gt; ) &#125;&#125;)const User = React.createClass(&#123; componentDidMount() &#123; this.setState(&#123; // route components are rendered with useful information, like URL params user: findUserById(this.props.params.userId) &#125;) &#125;, render() &#123; return ( &lt;div&gt; &lt;h2&gt;&#123;this.state.user.name&#125;&lt;/h2&gt; &#123;/* etc. */&#125; &lt;/div&gt; ) &#125;&#125;)// Declarative route configuration (could also load this config lazily// instead, all you really need is a single root route, you don't need to// colocate the entire config).render(( &lt;Router history=&#123;browserHistory&#125;&gt; &lt;Route path="/" component=&#123;App&#125;&gt; &lt;Route path="about" component=&#123;About&#125;/&gt; &lt;Route path="users" component=&#123;Users&#125;&gt; &lt;Route path="/user/:userId" component=&#123;User&#125;/&gt; &lt;/Route&gt; &lt;Route path="*" component=&#123;NoMatch&#125;/&gt; &lt;/Route&gt; &lt;/Router&gt;), document.getElementById('root')) See more in the Introduction, Guides, and Examples. Versioning and StabilityWe want React Router to be a stable dependency that’s easy to keep current. We take the same approach to versioning as React.js itself: React Versioning Scheme. ThanksThanks to our sponsors for supporting the development ofReact Router. React Router was initially inspired by Ember’s fantastic router. Many thanks to the Ember team. Also, thanks to BrowserStack for providing the infrastructure that allows us to run our build in real browsers.]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F03%2F03%2FRedux%2F</url>
      <content type="text"><![CDATA[Redux is a predictable state container for JavaScript apps.(If you’re looking for a WordPress framework, check out Redux Framework.) It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger. You can use Redux together with React, or with any other view library.It is tiny (2kB, including dependencies). Learn Redux from its creator:Part 1: Getting Started with Redux (30 free videos)Part 2: Building React Applications with Idiomatic Redux (27 free videos) Testimonials “Love what you’re doing with Redux”Jing Chen, creator of Flux “I asked for comments on Redux in FB’s internal JS discussion group, and it was universally praised. Really awesome work.”Bill Fisher, author of Flux documentation “It’s cool that you are inventing a better Flux by not doing Flux at all.”André Staltz, creator of Cycle Before Proceeding Further Also read:You Might Not Need Redux Developer ExperienceI wrote Redux while working on my React Europe talk called “Hot Reloading with Time Travel”. My goal was to create a state management library with minimal API but completely predictable behavior, so it is possible to implement logging, hot reloading, time travel, universal apps, record and replay, without any buy-in from the developer. InfluencesRedux evolves the ideas of Flux, but avoids its complexity by taking cues from Elm.Whether you have used them or not, Redux only takes a few minutes to get started with. InstallationTo install the stable version: 1npm install --save redux This assumes you are using npm as your package manager. If you’re not, you can access these files on unpkg, download them, or point your package manager to them. Most commonly people consume Redux as a collection of CommonJS modules. These modules are what you get when you import redux in a Webpack, Browserify, or a Node environment. If you like to live on the edge and use Rollup, we support that as well. If you don’t use a module bundler, it’s also fine. The redux npm package includes precompiled production and development UMD builds in the dist folder. They can be used directly without a bundler and are thus compatible with many popular JavaScript module loaders and environments. For example, you can drop a UMD build as a &lt;script&gt; tag on the page, or tell Bower to install it. The UMD builds make Redux available as a window.Redux global variable. The Redux source code is written in ES2015 but we precompile both CommonJS and UMD builds to ES5 so they work in any modern browser. You don’t need to use Babel or a module bundler to get started with Redux. Complementary PackagesMost likely, you’ll also need the React bindings and the developer tools. 12npm install --save react-reduxnpm install --save-dev redux-devtools Note that unlike Redux itself, many packages in the Redux ecosystem don’t provide UMD builds, so we recommend using CommonJS module bundlers like Webpack and Browserify for the most comfortable development experience. The GistThe whole state of your app is stored in an object tree inside a single store.The only way to change the state tree is to emit an action, an object describing what happened.To specify how the actions transform the state tree, you write pure reducers. That’s it! 123456789101112131415161718192021222324252627282930313233343536373839404142434445import &#123; createStore &#125; from 'redux'/** * This is a reducer, a pure function with (state, action) =&gt; state signature. * It describes how an action transforms the state into the next state. * * The shape of the state is up to you: it can be a primitive, an array, an object, * or even an Immutable.js data structure. The only important part is that you should * not mutate the state object, but return a new object if the state changes. * * In this example, we use a `switch` statement and strings, but you can use a helper that * follows a different convention (such as function maps) if it makes sense for your * project. */function counter(state = 0, action) &#123; switch (action.type) &#123; case 'INCREMENT': return state + 1 case 'DECREMENT': return state - 1 default: return state &#125;&#125;// Create a Redux store holding the state of your app.// Its API is &#123; subscribe, dispatch, getState &#125;.let store = createStore(counter)// You can use subscribe() to update the UI in response to state changes.// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.// However it can also be handy to persist the current state in the localStorage.store.subscribe(() =&gt; console.log(store.getState()))// The only way to mutate the internal state is to dispatch an action.// The actions can be serialized, logged or stored and later replayed.store.dispatch(&#123; type: 'INCREMENT' &#125;)// 1store.dispatch(&#123; type: 'INCREMENT' &#125;)// 2store.dispatch(&#123; type: 'DECREMENT' &#125;)// 1 Instead of mutating the state directly, you specify the mutations you want to happen with plain objects called actions. Then you write a special function called a reducer to decide how every action transforms the entire application’s state. If you’re coming from Flux, there is a single important difference you need to understand. Redux doesn’t have a Dispatcher or support many stores. Instead, there is just a single store with a single root reducing function. As your app grows, instead of adding stores, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. This is exactly like how there is just one root component in a React app, but it is composed out of many small components. This architecture might seem like an overkill for a counter app, but the beauty of this pattern is how well it scales to large and complex apps. It also enables very powerful developer tools, because it is possible to trace every mutation to the action that caused it. You can record user sessions and reproduce them just by replaying every action. Learn Redux from Its CreatorGetting Started with Redux is a video course consisting of 30 videos narrated by Dan Abramov, author of Redux. It is designed to complement the “Basics” part of the docs while bringing additional insights about immutability, testing, Redux best practices, and using Redux with React. This course is free and will always be. “Great course on egghead.io by @dan_abramov - instead of just showing you how to use #redux, it also shows how and why redux was built!”Sandrino Di Mattia “Plowing through @dan_abramov ‘Getting Started with Redux’ - its amazing how much simpler concepts get with video.”Chris Dhanaraj “This video series on Redux by @dan_abramov on @eggheadio is spectacular!”Eddie Zaneski “Come for the name hype. Stay for the rock solid fundamentals. (Thanks, and great job @dan_abramov and @eggheadio!)”Dan “This series of videos on Redux by @dan_abramov is repeatedly blowing my mind - gunna do some serious refactoring”Laurence Roberts So, what are you waiting for? Watch the 30 Free Videos!If you enjoyed my course, consider supporting Egghead by buying a subscription. Subscribers have access to the source code for the example in every one of my videos, as well as to tons of advanced lessons on other topics, including JavaScript in depth, React, Angular, and more. Many Egghead instructors are also open source library authors, so buying a subscription is a nice way to thank them for the work that they’ve done. Documentation Introduction Basics Advanced Recipes Troubleshooting Glossary API Reference For PDF, ePub, and MOBI exports for offline reading, and instructions on how to create them, please see: paulkogel/redux-offline-docs. Examples Counter Vanilla (source) Counter (source) Todos (source) Todos with Undo (source) TodoMVC (source) Shopping Cart (source) Tree View (source) Async (source) Universal (source) Real World (source) If you’re new to the NPM ecosystem and have troubles getting a project up and running, or aren’t sure where to paste the gist above, check out simplest-redux-example that uses Redux together with React and Browserify. DiscussionJoin the #redux channel of the Reactiflux Discord community. Thanks The Elm Architecture for a great intro to modeling state updates with reducers; Turning the database inside-out for blowing my mind; Developing ClojureScript with Figwheel for convincing me that re-evaluation should “just work”; Webpack for Hot Module Replacement; Flummox for teaching me to approach Flux without boilerplate or singletons; disto for a proof of concept of hot reloadable Stores; NuclearJS for proving this architecture can be performant; Om for popularizing the idea of a single state atom; Cycle for showing how often a function is the best tool; React for the pragmatic innovation. Special thanks to Jamie Paton for handing over the redux NPM package name. LogoYou can find the official logo on GitHub. Change LogThis project adheres to Semantic Versioning.Every release, along with the migration instructions, is documented on the Github Releases page. PatronsThe work on Redux was funded by the community.Meet some of the outstanding companies that made it possible: Webflow Ximedes See the full list of Redux patrons. LicenseMIT]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F03%2F03%2FReact%2F</url>
      <content type="text"><![CDATA[React &middot; React is a JavaScript library for building user interfaces. Declarative: React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug. Component-Based: Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM. Learn Once, Write Anywhere: We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using React Native. Learn how to use React in your own project. ExamplesWe have several examples on the website. Here is the first one to get you started: 12345678910class HelloMessage extends React.Component &#123; render() &#123; return &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;; &#125;&#125;ReactDOM.render( &lt;HelloMessage name="John" /&gt;, document.getElementById('container')); This example will render “Hello John” into a container on the page. You’ll notice that we used an HTML-like syntax; we call it JSX. JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. We recommend using Babel with a React preset to convert JSX into native JavaScript for browsers to digest. InstallationReact is available as the react package on npm. It is also available on a CDN. React is flexible and can be used in a variety of projects. You can create new apps with it, but you can also gradually introduce it into an existing codebase without doing a rewrite. The recommended way to install React depends on your project. Here you can find short guides for the most common scenarios: Trying Out React Creating a Single Page Application Adding React to an Existing Application ContributingThe main purpose of this repository is to continue to evolve React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React. Code of ConductFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated. Contributing GuideRead our contributing guide to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React. Good First BugTo help you get your feet wet and get you familiar with our contribution process, we have a list of good first bugs that contain bugs which are fairly easy to fix. This is a great place to get started. LicenseReact is BSD licensed. We also provide an additional patent grant. React documentation is Creative Commons licensed. Examples provided in this repository and in the documentation are separately licensed. TroubleshootingSee the Troubleshooting Guide]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[画鸡]]></title>
      <url>%2F2017%2F02%2F17%2F%E7%94%BB%E9%B8%A1%2F</url>
      <content type="text"><![CDATA[朝代：明代作者：唐寅头上红冠不用裁，满身雪白走将来。平生不敢轻言语，一叫千门万户开。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[长恨歌]]></title>
      <url>%2F2017%2F02%2F17%2F%E9%95%BF%E6%81%A8%E6%AD%8C%2F</url>
      <content type="text"><![CDATA[作者：白居易朝代：唐代汉皇重色思倾国，御宇多年求不得。杨家有女初长成，养在深闺人未识。天生丽质难自弃，一朝选在君王侧。回眸一笑百媚生，六宫粉黛无颜色。春寒赐浴华清池，温泉水滑洗凝脂。侍儿扶起娇无力，始是新承恩泽时。云鬓花颜金步摇，芙蓉帐暖度春宵。春宵苦短日高起，从此君王不早朝。承欢侍宴无闲暇，春从春游夜专夜。后宫佳丽三千人，三千宠爱在一身。金屋妆成娇侍夜，玉楼宴罢醉和春。姊妹弟兄皆列土，可怜光彩生门户。遂令天下父母心，不重生男重生女。骊宫高处入青云，仙乐风飘处处闻。缓歌慢舞凝丝竹，尽日君王看不足。渔阳鼙鼓动地来，惊破霓裳羽衣曲。 九重城阙烟尘生，千乘万骑西南行。翠华摇摇行复止，西出都门百余里。六军不发无奈何，宛转蛾眉马前死。花钿委地无人收，翠翘金雀玉搔头。君王掩面救不得，回看血泪相和流。黄埃散漫风萧索，云栈萦纡登剑阁。峨嵋山下少人行，旌旗无光日色薄。蜀江水碧蜀山青，圣主朝朝暮暮情。行宫见月伤心色，夜雨闻铃肠断声。天旋地转回龙驭，到此踌躇不能去。马嵬坡下泥土中，不见玉颜空死处。君臣相顾尽沾衣，东望都门信马归。归来池苑皆依旧，太液芙蓉未央柳。芙蓉如面柳如眉，对此如何不泪垂。春风桃李花开日，秋雨梧桐叶落时。西宫南内多秋草，落叶满阶红不扫。梨园弟子白发新，椒房阿监青娥老。夕殿萤飞思悄然，孤灯挑尽未成眠。迟迟钟鼓初长夜，耿耿星河欲曙天。鸳鸯瓦冷霜华重，翡翠衾寒谁与共。悠悠生死别经年，魂魄不曾来入梦。临邛道士鸿都客，能以精诚致魂魄。为感君王辗转思，遂教方士殷勤觅。排空驭气奔如电，升天入地求之遍。上穷碧落下黄泉，两处茫茫皆不见。忽闻海上有仙山，山在虚无缥渺间。楼阁玲珑五云起，其中绰约多仙子。中有一人字太真，雪肤花貌参差是。金阙西厢叩玉扃，转教小玉报双成。闻道汉家天子使，九华帐里梦魂惊。揽衣推枕起徘徊，珠箔银屏迤逦开。云鬓半偏新睡觉，花冠不整下堂来。风吹仙袂飘飘举，犹似霓裳羽衣舞。玉容寂寞泪阑干，梨花一枝春带雨。含情凝睇谢君王，一别音容两渺茫。昭阳殿里恩爱绝，蓬莱宫中日月长。回头下望人寰处，不见长安见尘雾。惟将旧物表深情，钿合金钗寄将去。钗留一股合一扇，钗擘黄金合分钿。但教心似金钿坚，天上人间会相见。临别殷勤重寄词，词中有誓两心知。七月七日长生殿，夜半无人私语时。在天愿作比翼鸟，在地愿为连理枝。天长地久有时尽，此恨绵绵无绝期。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[离别与重逢]]></title>
      <url>%2F2017%2F02%2F17%2F%E7%A6%BB%E5%88%AB%E4%B8%8E%E9%87%8D%E9%80%A2%2F</url>
      <content type="text"><![CDATA[题记：暂时的离别是为了再次重逢时的感动离别离别的时候每一句话都是那么重缓缓地扣击着我们的心灵窗被敲开了我们诉说着回忆中的快乐回想著一张张可爱的笑脸院子里，操场上充满了甜甜的空气 离别的时候每一句话都是那么轻轻轻地说着离别时的感言轻轻的拉着彼此的手轻轻地在耳际说声对不起或永远祝福你离别的时候每一句话都显得那么悲伤离别时的感动在顷刻间爆发我们，我们，我们独自沉浸在自己的感伤中渐渐的平息……离别的时候每一句话都显得那么珍贵仔细的听著那熟悉的声音把每种都印刻在记忆里望著他们远去的背影，我知道，我们离别了我们带著共同的回忆和永远的祝福各自奔向远方……轻轻哼一首离别的歌～眼里噙满了泪…… 重逢重逢的时候那是心情的又一次触动惊喜的表情熟悉的面庞回忆中的甜蜜一瞬间在脑海中隐现于是，永远成为了所谓的缘分的代表重逢…惊喜…重逢的时候那是思念的又一次宣泄深情的一个拥抱紧紧的一个握手彼此的心轻鬆了许多才发现思念是一种病重逢…思念……重逢的时候那是记忆的又一次翻新彼此回忆著孩提时的美好诉说着自己的苦恼谈论着朋友的生活讲述着自己无奈的过往重逢…记忆…重逢的时候那是时间的又一次停滞那一刻，时间终于停了自己终于可以放假感动的身体一时瘫在那里重逢时的感动告诉了时光老人时间不能改变的东西……重逢…感动…重逢的时候，那是一阵欣喜，一阵感动欣喜之余还有一丝的忧伤因为我们毕竟还要赶路那么多线终有相交的一点可是相交以后注定还要分别但是，至少我明白暂时的离别是为了再次相聚时的感动……]]></content>
    </entry>

    
  
  
</search>
